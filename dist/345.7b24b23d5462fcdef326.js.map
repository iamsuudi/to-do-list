{"version":3,"file":"345.7b24b23d5462fcdef326.js","mappings":"whBAEe,MAAMA,EAQjBC,WAAAA,CAAYC,EAASC,GAAaC,EAAA,cANzBC,SAASC,cAAc,kBAAgBF,EAAA,qBAEhCC,SAASC,cAAc,0BAAwBF,EAAA,qBAE/CC,SAASC,cAAc,oBAInCC,KAAKL,QAAUA,EAEfK,KAAKJ,YAAcA,EAGDI,KAAKC,OAAOF,cAAc,cAClCG,YAAcF,KAAKJ,YAAYO,QAAQC,UAGjDJ,KAAKK,2BAELL,KAAKC,OAAOK,YAGQR,SAASC,cAAc,mBAC/BQ,iBAAiB,SAAS,KAClCP,KAAKQ,mBAAmB,IAIFV,SAASC,cAC/B,0BAEcQ,iBAAiB,SAAS,KACxCP,KAAKS,sBAAsB,IAITX,SAASC,cAAc,wBAC/BQ,iBAAiB,SAAS,KACpCP,KAAKU,mBAAmB,IAIJZ,SAASC,cAAc,wBAC/BQ,iBAAiB,SAAS,KACtCP,KAAKW,qBAAqB,GAElC,CAEAN,wBAAAA,GACI,MAAMO,EAAcZ,KAAKC,OAAOF,cAAc,0BACxCc,EAAOb,KAAKC,OAAOF,cAAc,iBAEvCa,EAAYE,MAAQd,KAAKL,QAAQoB,iBACjCF,EAAKC,MAAQd,KAAKL,QAAQqB,UAG1BhB,KAAKiB,kCAAkCL,EAAaC,EACxD,CAEAI,iCAAAA,CAAkCL,EAAaC,GAE3CD,EAAYL,iBAAiB,SAAUW,IAEnClB,KAAKL,QAAQwB,eAAeD,EAAEE,OAAON,OAGrCd,KAAKJ,YAAYM,YAAcgB,EAAEE,OAAON,KAAK,IAEjDD,EAAKN,iBAAiB,SAAUW,IAC5BlB,KAAKL,QAAQ0B,QAAQH,EAAEE,OAAON,MAAM,GAE5C,CAEAN,iBAAAA,GACI,mDAAoDc,MAAMC,IAInC,IAAIC,EAHJD,EAAOE,SAGQzB,KAAKL,QAAQ,GAEvD,CAEAc,oBAAAA,GACI,6BAAwDa,MACnDC,IAIyB,IAAIG,EAHTH,EAAOE,SAIpBzB,KAAKL,QACLK,KAAKJ,YACR,GAGb,CAEAc,iBAAAA,IAEIiB,EAAAA,EAAAA,IAAW3B,KAAKL,QAAQiC,WAAY5B,KAAKL,QAAQkC,SAGjD7B,KAAKC,OAAO6B,QAGZ9B,KAAKJ,YAAYmC,cAAcC,QACnC,CAEArB,mBAAAA,GACIX,KAAKC,OAAO6B,QAGZ9B,KAAKiC,cAAcC,UAAUF,OAAO,WAGpChC,KAAKmC,cAAcD,UAAUF,OAAO,UACxC,E","sources":["webpack://template/./src/dialog.js"],"sourcesContent":["import { deleteTodo } from './project';\n\nexport default class Dialog {\n\n    dialog = document.querySelector('dialog.detail');\n\n    divPriorities = document.querySelector('dialog div.priorities');\n\n    divDatePicker = document.querySelector('div.date-picker');\n\n    constructor(todoObj, clickedTodo) {\n\n        this.todoObj = todoObj;\n\n        this.clickedTodo = clickedTodo;\n\n        // update the title on dialog header\n        const spanTitle = this.dialog.querySelector('span.title');\n        spanTitle.textContent = this.clickedTodo.dataset.todoTitle;\n\n        // display Description and Note of the todo\n        this.renderDescriptionAndNote();\n\n        this.dialog.showModal();\n\n        // add listener to date picker\n        const remindmeBtn = document.querySelector('button.remindme');\n        remindmeBtn.addEventListener('click', () => {\n            this.displayDatePicker();\n        });\n\n        // add listener to changing-priority button\n        const changePriorityBtn = document.querySelector(\n            'button.change-priority'\n        );\n        changePriorityBtn.addEventListener('click', () => {\n            this.displaypriorityPanel();\n        });\n\n        // add listener to delete button of todos\n        const deleteTodoBtn = document.querySelector('dialog button.delete');\n        deleteTodoBtn.addEventListener('click', () => {\n            this.deleteTodoClicked();\n        });\n\n        // add listener to cancel button of dialog\n        const cancelDialogBtn = document.querySelector('dialog button.cancel');\n        cancelDialogBtn.addEventListener('click', () => {\n            this.cancelDialogClicked();\n        });\n    }\n\n    renderDescriptionAndNote() {\n        const description = this.dialog.querySelector('input.todo-description');\n        const note = this.dialog.querySelector('textarea#note');\n\n        description.value = this.todoObj.getDescription();\n        note.value = this.todoObj.getNote();\n\n        // update and sync description and note dynamically on change\n        this.SyncDescriptionAndNoteDynamically(description, note);\n    }\n\n    SyncDescriptionAndNoteDynamically(description, note) {\n        // listen to change and update dynamically\n        description.addEventListener('input', (e) => {\n            // sync to the todo object\n            this.todoObj.setDescription(e.target.value);\n\n            // sync to the todoNode\n            this.clickedTodo.textContent = e.target.value;\n        });\n        note.addEventListener('input', (e) => {\n            this.todoObj.setNote(e.target.value);\n        });\n    }\n\n    displayDatePicker() {\n        import(/* webpackPrefetch: true */ './date-picker').then((module) => {\n            const DatePicker = module.default;\n\n            // created datePicker Obj\n            const datePicker = new DatePicker(this.todoObj);\n        });\n    }\n\n    displaypriorityPanel() {\n        import(/* webpackPrefetch: true */ './priority-picker').then(\n            (module) => {\n                const Priority = module.default;\n\n                // create priority panel Obj (todos, index, priority, clickedTodo)\n                const priorityPanel = new Priority(\n                    this.todoObj,\n                    this.clickedTodo\n                );\n            }\n        );\n    }\n\n    deleteTodoClicked() {\n        // delete the todo object from array\n        deleteTodo(this.todoObj.getTitle(), this.todoObj.getId());\n\n        // close the dialog\n        this.dialog.close();\n\n        // delete the todo from the DOM\n        this.clickedTodo.parentElement.remove();\n    }\n\n    cancelDialogClicked() {\n        this.dialog.close();\n\n        // close priority changing panel if not closed\n        this.divPriorities.classList.remove('visible');\n\n        // close date-picker panel\n        this.divDatePicker.classList.remove('visible');\n    }\n}\n"],"names":["Dialog","constructor","todoObj","clickedTodo","_defineProperty","document","querySelector","this","dialog","textContent","dataset","todoTitle","renderDescriptionAndNote","showModal","addEventListener","displayDatePicker","displaypriorityPanel","deleteTodoClicked","cancelDialogClicked","description","note","value","getDescription","getNote","SyncDescriptionAndNoteDynamically","e","setDescription","target","setNote","then","module","DatePicker","default","Priority","deleteTodo","getTitle","getId","close","parentElement","remove","divPriorities","classList","divDatePicker"],"sourceRoot":""}